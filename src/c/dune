(* -*- tuareg -*- *)

let libuv_resolve =
  match Sys.getenv "LUV_USE_SYSTEM_LIBUV" with
  | "pkg_config" | "pkg-config" -> `pkg_config
  | "yes" -> `system_luv
  | _ -> `vendored
  | exception Not_found -> `vendored

let build_flags_resolver_stanza =
  match libuv_resolve with
  | `pkg_config -> "(build_flags_resolver (pkg_config))"
  | `vendored ->
    {|(build_flags_resolver
       (vendored
         (c_flags (-fPIC -I vendor/libuv/include -I src/c/vendor/libuv/include))
         (c_library_flags ())))|}
  | `system_luv ->
    (* older, non-pkg-config way of using the system luv *)
    {|(build_flags_resolver
       (vendored
         (c_flags ())
         (c_library_flags (-luv))))|}

let foreign_archives_stanza =
  match libuv_resolve with
  | `vendored -> "(foreign_archives uv)"
  | `pkg_config -> ""
  | `system_luv -> ""

let include_dirs_stanza =
  match libuv_resolve with
  | `vendored -> "(include_dirs vendor/libuv/include)"
  | `pkg_config -> ""
  | `system_luv -> ""

let install_h =
  match libuv_resolve with
  | `vendored -> true
  | `pkg_config -> false
  | `system_luv -> false

let () = Jbuild_plugin.V1.send @@ {|
(library
  (name luv_c)
  (public_name luv.c)
  (libraries threads)
  ; ctypes code-gen produces code that warns due to backward compatibility
  (flags (:standard -w -9-11-27))
  (foreign_stubs
    (language c)
    (names helpers)|}
    ^ include_dirs_stanza ^ {|)
  |} ^ foreign_archives_stanza ^ {|
  (ctypes
    (external_library_name libuv)
    |} ^ build_flags_resolver_stanza ^ {|
    (type_description
      (instance Types)
      (functor Type_description))
    (function_description
      (concurrency unlocked)
      (instance Blocking)
      (functor Blocking_function_description))
    (function_description
      (concurrency sequential)
      (instance Non_blocking)
      (functor Non_blocking_function_description))
    (generated_entry_point C)
    (headers (preamble "#include \"windows_version.h\"
#include <caml/mlvalues.h>
#include <caml/socketaddr.h>
#include <uv.h>
#include \"helpers.h\"
"))))

|}^ (if not install_h then "" else {|

(install
 (section lib)
 (package luv)
 (files
  (vendor/libuv/include/uv.h as uv.h)
  (vendor/libuv/include/uv/aix.h as uv/aix.h)
  (vendor/libuv/include/uv/android-ifaddrs.h as uv/android-ifaddrs.h)
  (vendor/libuv/include/uv/bsd.h as uv/bsd.h)
  (vendor/libuv/include/uv/darwin.h as uv/darwin.h)
  (vendor/libuv/include/uv/errno.h as uv/errno.h)
  (vendor/libuv/include/uv/linux.h as uv/linux.h)
  (vendor/libuv/include/uv/os390.h as uv/os390.h)
  (vendor/libuv/include/uv/posix.h as uv/posix.h)
  (vendor/libuv/include/uv/stdint-msvc2008.h as uv/stdint-msvc2008.h)
  (vendor/libuv/include/uv/sunos.h as uv/sunos.h)
  (vendor/libuv/include/uv/threadpool.h as uv/threadpool.h)
  (vendor/libuv/include/uv/tree.h as uv/tree.h)
  (vendor/libuv/include/uv/unix.h as uv/unix.h)
  (vendor/libuv/include/uv/version.h as uv/version.h)
  (vendor/libuv/include/uv/win.h as uv/win.h)))

|}) ^{|
; The vendored libuv.
(rule
 (targets libuv.a dlluv%{ext_dll})
 (deps (source_tree vendor))
 (action (progn
  (bash "cp -r vendor/configure/* vendor/libuv/")
  (chdir vendor/libuv (progn
   (bash
    "sh configure --host `ocamlc -config | awk '/host/ {print $NF}'` \
      'CC=%{cc}' CFLAGS=-DNDEBUG --silent --enable-silent-rules")
   (ignore-outputs (bash
    "$([ '%{os_type}' = Unix ] && echo %{make} || echo make) V=0 -j 4 \
      -o aclocal.m4 -o Makefile.in -o configure \
      -o configure.status -o Makefile libuv.la"))
   (ignore-outputs (bash
    "sh libtool --silent --no-warnings --mode install cp libuv.la `pwd`"))))
  (bash "cp vendor/libuv/libuv.a .")
  (ignore-outputs (bash
   "cp vendor/libuv/libuv.so.1.0.0 dlluv.so || \
    cp vendor/libuv/libuv.1.dylib dlluv.so || \
    cp vendor/bin/libuv-1.dll dlluv.dll")))))

(rule
 (targets extra_libs.sexp)
 (action (ignore-outputs (bash "\
   if ocamlc -config | grep mingw; then \
     echo '(-liphlpapi -lpsapi -luserenv)' > extra_libs.sexp; \
   else \
     echo '()' > extra_libs.sexp; \
   fi"))))
|}
